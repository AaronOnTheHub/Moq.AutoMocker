<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension="generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)packages\Moq.4.0.10827\lib\NET40\Moq.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Moq" #>
using System;
using System.Linq.Expressions;
using Moq;
using Moq.Language.Flow;

namespace Moq.AutoMock
{
	public partial class AutoMocker
	{
		<# 
		var verifies = typeof(Mock<>)
			.GetMethods()
			.Where(x => x.Name == "Verify");

		foreach (var verify in verifies) 
		{
			var parameters = verify.GetParameters()
				.Select(x => string.Format("{0} {1}",
					ToString(x.ParameterType),
					x.Name));
			var paramsAsString = string.Join(", ", parameters)
			   .Replace("TResult", "object");
		#>

		public void Verify<T>(<#= paramsAsString #>)
			where T : class
		{
			var mock = GetMock<T>();
			<#
			var parms = string.Join(", ", verify.GetParameters().Select(x => x.Name));
			#>
			mock.Verify(<#= parms #>);
		}

		<# 
		} 
		#>
	}
}

<#+
string ToString(Type type)
{
	if (!type.IsGenericType)
		return type.Name;

	var name = Regex.Replace(type.GetGenericTypeDefinition().Name, "`.*", "");
	var ret = string.Format("{0}<", name);
	int count = 0;
	foreach (var arg in type.GetGenericArguments())
	{
		if (count > 0)
			ret += ", ";
		ret += ToString(arg);
		count++;
	}
	return ret + ">";
}
#>